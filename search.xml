<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Docker Image</title>
      <link href="/2018/05/28/docker-Image/"/>
      <url>/2018/05/28/docker-Image/</url>
      <content type="html"><![CDATA[<h2 id="1-what"><a href="#1-what" class="headerlink" title="1.what"></a>1.what</h2><p>docker 是用go写的，将进程进行封装，<br>Docker本身是容器管理技术，不是虚拟化技术。<br>类似技术：VM</p><h2 id="2-why"><a href="#2-why" class="headerlink" title="2.why"></a>2.why</h2><ul><li>快速创建环境（开发，测试，生产）</li><li>整体交付（运行环境+代码）</li><li>环境一致性保证，从开发，测试以及到生产环境</li><li>更好的完成devops</li></ul><h2 id="3-how"><a href="#3-how" class="headerlink" title="3.how"></a>3.how</h2><p>见下</p><h2 id="4-install"><a href="#4-install" class="headerlink" title="4.install"></a>4.install</h2><p>略</p><h2 id="5-基本概念"><a href="#5-基本概念" class="headerlink" title="5.基本概念"></a>5.基本概念</h2><ul><li>image<ol><li>一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</li><li>分层存储</li></ol></li><li>container：<ol><li>容器与镜像的关系<br> 容器就是镜像的实例，一个镜像可以创建无数个实例。</li></ol><ul><li>区别：<ol><li>镜像only读取 不能写入，但是可以在当前image上叠加，形成新的image</li><li>容器支持读写    </li></ol></li></ul></li><li>registry：<br>  镜像中央存储仓库<br>  其中Docker hub是docker官方提供的中央存储仓库</li></ul><h2 id="6-image详解"><a href="#6-image详解" class="headerlink" title="6.image详解"></a>6.image详解</h2><blockquote><p>Docker镜像管理</p><ol><li>镜像分层技术<br>|-aufs</li><li>创建镜像<br> |-DockerFile(recommend)<br> |-docker commit</li><li>下载镜像到主机<br> |-docker pull</li><li>删除镜像<br> |-docker rmi<br>4.1 两种情况不能删除images<ol><li>该进行有创建容器存在</li><li>该image是其他image的父image</li></ol></li><li>上传镜像到registry<br> |-docker push</li><li>Docker数据管理<br>如果我们删除了容器，但是数据不会被删除。<br>特性：<br> 1.保留容器数据<br> 2.容器volume最佳使用方法<br> 3.容器和volume的关系<br> 4.容器volume如何管理</li></ol></blockquote><h2 id="7-tag"><a href="#7-tag" class="headerlink" title="7. tag"></a>7. tag</h2><p>下面通过例子为大家介绍 Docker 社区普遍使用的 tag 方案。</p><blockquote><p>docker tag myimage-v2.0.0 myimage:2<br> docker tag myimage-v2.0.0 myimage:2.0<br> docker tag myimage-v2.0.0 myimage:2.0.0<br> docker tag myimage-v2.0.0 myimage:latest</p></blockquote><blockquote><p>参考：<a href="http://www.cnblogs.com/CloudMan6/p/6885700.html" target="_blank" rel="noopener">http://www.cnblogs.com/CloudMan6/p/6885700.html</a></p></blockquote><h2 id="8-Docker-Hub"><a href="#8-Docker-Hub" class="headerlink" title="8. Docker Hub"></a>8. Docker Hub</h2><ol><li><p>登陆Docker Hub</p><ul><li>docker login -u xxxx</li></ul></li><li><p>修改镜像的 repository 使之与 Docker Hub 账号匹配。</p><ul><li>docker tag username/app:version</li></ul></li><li><p>上传</p><ul><li>docker push username/app:version</li></ul></li><li><p>下载</p><ul><li>docker pull username/app:version</li></ul></li></ol><h2 id="9-搭建本地-Registry"><a href="#9-搭建本地-Registry" class="headerlink" title="9. 搭建本地 Registry"></a>9. 搭建本地 Registry</h2><p>略</p><h2 id="10-小结"><a href="#10-小结" class="headerlink" title="10. 小结"></a>10. 小结</h2><p>下面是镜像的常用操作子命令：</p><ul><li><p>images    显示镜像列表</p></li><li><p>history   显示镜像构建历史</p></li><li><p>commit    从容器创建新镜像</p></li><li><p>build     从 Dockerfile 构建镜像</p></li><li><p>tag       给镜像打 tag</p></li><li><p>pull      从 registry 下载镜像</p></li><li><p>push      将 镜像 上传到 registry</p></li><li><p>rmi       删除 Docker host 中的镜像</p></li><li><p>search    搜索 Docker Hub 中的镜像</p></li></ul>]]></content>
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker Image</title>
      <link href="/2018/05/28/docker-container/"/>
      <url>/2018/05/28/docker-container/</url>
      <content type="html"><![CDATA[<h2 id="1-what"><a href="#1-what" class="headerlink" title="1.what"></a>1.what</h2><p>docker 是用go写的，将进程进行封装，<br>Docker本身是容器管理技术，不是虚拟化技术。<br>类似技术：VM</p><h2 id="2-why"><a href="#2-why" class="headerlink" title="2.why"></a>2.why</h2><ul><li>快速创建环境（开发，测试，生产）</li><li>整体交付（运行环境+代码）</li><li>环境一致性保证，从开发，测试以及到生产环境</li><li>更好的完成devops</li></ul><h2 id="3-how"><a href="#3-how" class="headerlink" title="3.how"></a>3.how</h2><p>见下</p><h2 id="4-install"><a href="#4-install" class="headerlink" title="4.install"></a>4.install</h2><p>略</p><h2 id="5-基本概念"><a href="#5-基本概念" class="headerlink" title="5.基本概念"></a>5.基本概念</h2><ul><li>image<ol><li>一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</li><li>分层存储</li></ol></li><li>container：<ol><li>容器与镜像的关系<br> 容器就是镜像的实例，一个镜像可以创建无数个实例。</li></ol><ul><li>区别：<ol><li>镜像only读取 不能写入，但是可以在当前image上叠加，形成新的image</li><li>容器支持读写    </li></ol></li></ul></li><li>registry：<br>  镜像中央存储仓库<br>  其中Docker hub是docker官方提供的中央存储仓库</li></ul><h2 id="6-image详解"><a href="#6-image详解" class="headerlink" title="6.image详解"></a>6.image详解</h2><blockquote><p>Docker镜像管理</p><ol><li>镜像分层技术<br>|-aufs</li><li>创建镜像<br> |-DockerFile(recommend)<br> |-docker commit</li><li>下载镜像到主机<br> |-docker pull</li><li>删除镜像<br> |-docker rmi<br>4.1 两种情况不能删除images<ol><li>该进行有创建容器存在</li><li>该image是其他image的父image</li></ol></li><li>上传镜像到registry<br> |-docker push</li><li>Docker数据管理<br>如果我们删除了容器，但是数据不会被删除。<br>特性：<br> 1.保留容器数据<br> 2.容器volume最佳使用方法<br> 3.容器和volume的关系<br> 4.容器volume如何管理</li></ol></blockquote><h2 id="7-tag"><a href="#7-tag" class="headerlink" title="7. tag"></a>7. tag</h2><p>下面通过例子为大家介绍 Docker 社区普遍使用的 tag 方案。</p><blockquote><p>docker tag myimage-v2.0.0 myimage:2<br> docker tag myimage-v2.0.0 myimage:2.0<br> docker tag myimage-v2.0.0 myimage:2.0.0<br> docker tag myimage-v2.0.0 myimage:latest</p></blockquote><blockquote><p>参考：<a href="http://www.cnblogs.com/CloudMan6/p/6885700.html" target="_blank" rel="noopener">http://www.cnblogs.com/CloudMan6/p/6885700.html</a></p></blockquote><h2 id="8-Docker-Hub"><a href="#8-Docker-Hub" class="headerlink" title="8. Docker Hub"></a>8. Docker Hub</h2><ol><li><p>登陆Docker Hub</p><ul><li>docker login -u xxxx</li></ul></li><li><p>修改镜像的 repository 使之与 Docker Hub 账号匹配。</p><ul><li>docker tag username/app:version</li></ul></li><li><p>上传</p><ul><li>docker push username/app:version</li></ul></li><li><p>下载</p><ul><li>docker pull username/app:version</li></ul></li></ol><h2 id="9-搭建本地-Registry"><a href="#9-搭建本地-Registry" class="headerlink" title="9. 搭建本地 Registry"></a>9. 搭建本地 Registry</h2><p>略</p><h2 id="10-小结"><a href="#10-小结" class="headerlink" title="10. 小结"></a>10. 小结</h2><p>下面是镜像的常用操作子命令：</p><ul><li><p>images    显示镜像列表</p></li><li><p>history   显示镜像构建历史</p></li><li><p>commit    从容器创建新镜像</p></li><li><p>build     从 Dockerfile 构建镜像</p></li><li><p>tag       给镜像打 tag</p></li><li><p>pull      从 registry 下载镜像</p></li><li><p>push      将 镜像 上传到 registry</p></li><li><p>rmi       删除 Docker host 中的镜像</p></li><li><p>search    搜索 Docker Hub 中的镜像</p></li></ul>]]></content>
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker NetWork</title>
      <link href="/2018/05/28/docker-network/"/>
      <url>/2018/05/28/docker-network/</url>
      <content type="html"><![CDATA[<h2 id="Docker-网络从覆盖范围可分为"><a href="#Docker-网络从覆盖范围可分为" class="headerlink" title="Docker 网络从覆盖范围可分为"></a>Docker 网络从覆盖范围可分为</h2><ul><li><p>单个 host 上的容器网络</p></li><li><p>跨多个 host 的网络</p></li></ul><p>##一、单个host上的容器网络<br>Docker 安装时会自动在 host 上创建三个网络，</p><ul><li>docker network ls 命令查看网络<br><img src="http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20170620-1497931101445096100.jpg" alt="docker network" title="network"></li></ul><blockquote><h3 id="none-网络"><a href="#none-网络" class="headerlink" title="none 网络"></a>none 网络</h3><p>none 网络就是什么都没有的网络。挂在这个网络下的容器除了 lo，没有其他任何网卡。容器创建时，可以通过 –network=none 指定使用 none 网络</p><ul><li>应用场景<ul><li>封闭意味着隔离，一些对安全性要求高并且不需要联网的应用可以使用 none 网络。</li><li>比如某个容器的唯一用途是生成随机密码，就可以放到 none 网络中避免密码被窃取。<h3 id="host-网络"><a href="#host-网络" class="headerlink" title="host 网络"></a>host 网络</h3>连接到 host 网络的容器共享 Docker host 的网络栈，容器的网络配置与 host 完全一样。可以通过 –network=host 指定使用 host 网络。</li></ul></li><li>host 网络的使用场景<ul><li>直接使用 Docker host 的网络最大的好处就是性能，如果容器对网络传输效率有较高要求，则可以选择 host 网络。当然不便之处就是牺牲一些灵活性，比如要考虑端口冲突问题，Docker host 上已经使用的端口就不能再用了。</li><li>另一个用途是让容器可以直接配置 host 网路。比如某些跨 host 的网络解决方案，其本身也是以容器方式运行的，这些方案需要对网络进行配置，比如管理 iptables，大家将会在后面进阶技术章节看到。<h3 id="bride网络-默认，应用最广泛"><a href="#bride网络-默认，应用最广泛" class="headerlink" title="bride网络( 默认，应用最广泛 )"></a>bride网络( 默认，应用最广泛 )</h3>参考 <a href="http://www.cnblogs.com/CloudMan6/p/7066851.html" target="_blank" rel="noopener">http://www.cnblogs.com/CloudMan6/p/7066851.html</a></li></ul></li></ul></blockquote><p>容器创建时，docker 会自动从 172.17.0.0/16 中分配一个 IP，这里 16 位的掩码保证有足够多的 IP 可以供容器使用。</p><p>除了 none, host, bridge 这三个自动创建的网络，用户也可以根据业务需要创建 user-defined 网络</p><h2 id="1-如何自定义容器网络"><a href="#1-如何自定义容器网络" class="headerlink" title="1.如何自定义容器网络"></a>1.如何自定义容器网络</h2><p>除了 none, host, bridge 这三个自动创建的网络，用户也可以根据业务需要创建 user-defined 网络。</p><blockquote><p>Docker 提供三种 user-defined 网络驱动：bridge, overlay 和 macvlan。<br>overlay 和 macvlan 用于创建跨主机的网络，我们后面有章节单独讨论。</p></blockquote><ol><li>我们可通过 bridge 驱动创建类似前面默认的 bridge 网络<br><img src="http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20170625-1498380821585010620.jpg" alt=""></li><li>查看一下当前 host 的网络结构变化<br><img src="http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20170625-1498380821852088946.jpg" alt=""></li><li>新增了一个网桥 br-eaed97dc9a77，这里 eaed97dc9a77 正好新建 bridge 网络 my_net 的短 id。执行 docker network inspect 查看一下 my_net 的配置信息：<br><img src="http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20170625-1498380822123012326.jpg" alt=""></li><li><p>这里 172.18.0.0/16 是 Docker 自动分配的 IP 网段。</p><blockquote><p>我们可以自己指定 IP 网段吗？<br> 答案是：可以。<br> 只需在创建网段时指定 –subnet 和 –gateway 参数：</p></blockquote><p><img src="http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20170625-1498380822453027985.jpg" alt=""></p><p>这里我们创建了新的 bridge 网络 my_net2，网段为 172.22.16.0/24，网关为 172.22.16.1。与前面一样，网关在 my_net2 对应的网桥 br-5d863e9f78b6 上：<br><img src="http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20170625-1498380822801055480.jpg" alt=""></p></li><li><p>容器要使用新的网络，需要在启动时通过 –network 指定：<br><img src="http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20170625-1498380823108061467.jpg" alt=""></p><blockquote><p>容器分配到的 IP 为 172.22.16.2。<br>到目前为止，容器的 IP 都是 docker 自动从 subnet 中分配，我们能否指定一个静态 IP 呢？<br>答案是：可以，通过–ip指定。</p></blockquote><p> <img src="http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20170625-1498380823478020210.jpg" alt=""><br> 注：只有使用 –subnet 创建的网络才能指定静态 IP。<br>my_net 创建时没有指定 –subnet，如果指定静态 IP 报错如下：<br><img src="http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20170625-1498380823825017010.jpg" alt=""></p></li></ol><p>好了，我们来看看当前 docker host 的网络拓扑结构。</p><p><img src="http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20170625-1498380824084029584.jpg" alt=""></p><blockquote><p>参考 <a href="http://www.cnblogs.com/CloudMan6/p/7077198.html" target="_blank" rel="noopener">http://www.cnblogs.com/CloudMan6/p/7077198.html</a></p></blockquote><h2 id="2-容器之间的连通性"><a href="#2-容器之间的连通性" class="headerlink" title="2.容器之间的连通性"></a>2.容器之间的连通性</h2><p>根据上面的拓扑图，可以知道</p><ul><li>两个 busybox 容器都挂在 my_net2 上，应该能够互通</li><li>两个网络属于不同的网桥，应该不能通信</li></ul><h3 id="那如何让httpd与busybox通信呢？"><a href="#那如何让httpd与busybox通信呢？" class="headerlink" title="那如何让httpd与busybox通信呢？"></a>那如何让httpd与busybox通信呢？</h3><blockquote><p>答案：为 httpd 容器添加一块 net_my2 的网卡。<br>这个可以通过docker network connect 命令实现。<br><img src="http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20170627-1498578808541085830.jpg" alt=""></p></blockquote><ul><li>我们在 httpd 容器中查看一下网络配置：<br><img src="http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20170627-1498578808899033377.jpg" alt=""><br>容器中增加了一个网卡 eth1，分配了 my_net2 的 IP 172.22.16.3。现在 busybox 能够访问 httpd 了</li></ul><h2 id="拓扑图变成："><a href="#拓扑图变成：" class="headerlink" title="拓扑图变成："></a>拓扑图变成：</h2><p><img src="http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20170627-1498578810389086286.jpg" alt=""></p><h2 id="3-容器间通信的三种方式"><a href="#3-容器间通信的三种方式" class="headerlink" title="3.容器间通信的三种方式"></a>3.容器间通信的三种方式</h2><ul><li>IP<blockquote><p>从上一节的例子可以得出这样一个结论：两个容器要能通信，必须要有属于同一个网络的网卡。</p></blockquote></li></ul><blockquote><p>满足这个条件后，容器就可以通过 IP 交互了。具体做法是在容器创建时通过 –network 指定相应的网络，或者通过 docker network connect 将现有容器加入到指定网络。可参考上一节 httpd 和 busybox 的例子，这里不再赘述。</p><ul><li>Docker DNS Server<br>从 Docker 1.10 版本开始，docker daemon 实现了一个内嵌的 DNS server，使容器可以直接通过“容器名”通信。方法很简单，只要在启动时用 –name 为容器命名就可以了。</li></ul></blockquote><blockquote><p>docker run -it –network=my_net2 –name=bbox1 busybox<br>docker run -it –network=my_net2 –name=bbox2 busybox<br>bbox2 就可以直接 ping 到 bbox1 </p></blockquote><p>使用 docker DNS 有个限制：只能在 user-defined 网络中使用。也就是说，默认的 bridge 网络是无法使用 DNS 的。</p><blockquote><p>docker run -it –name=bbox3 busybox<br>docker run -it –name=bbox4 busybox<br>这样就不能ping通</p><ul><li>joined</li></ul></blockquote><p>joined 容器非常特别，它可以使两个或多个容器共享一个网络栈，共享网卡和配置信息，joined 容器之间可以通过 127.0.0.1 直接通信。</p><ol><li>先创建一个 httpd 容器，名字为 web1。<blockquote><p>docker run -d -it –name=web1 httpd</p></blockquote></li><li>建 busybox 容器并通过 –network=container:web1 指定 jointed 容器为 web1<blockquote><p>docker run -it –network=container:web1 busybox</p></blockquote></li></ol><h2 id="joined-容器非常适合以下场景："><a href="#joined-容器非常适合以下场景：" class="headerlink" title="joined 容器非常适合以下场景："></a>joined 容器非常适合以下场景：</h2><ol><li>不同容器中的程序希望通过 loopback 高效快速地通信，比如 web server 与 app server。</li><li>希望监控其他容器的网络流量，比如运行在独立容器中的网络监控程序。</li></ol><h2 id="4-容器如何访问外部世界"><a href="#4-容器如何访问外部世界" class="headerlink" title="4. 容器如何访问外部世界"></a>4. 容器如何访问外部世界</h2><p>这里涉及两个方向</p><ul><li>容器访问外部世界（默认就可以）</li><li>外部世界访问容器</li></ul><h3 id="一、容器访问外部世界"><a href="#一、容器访问外部世界" class="headerlink" title="一、容器访问外部世界"></a>一、容器访问外部世界</h3><p>理解容器如何把数据包传递带外网<br><img src="http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20170702-1499003245301093206.jpg" alt=""></p><blockquote><ol><li>busybox 发送 ping 包：172.17.0.2 &gt; <a href="http://www.bing.com。" target="_blank" rel="noopener">www.bing.com。</a></li><li>docker0 收到包，发现是发送到外网的，交给 NAT 处理。</li><li>NAT 将源地址换成 enp0s3 的 IP：10.0.2.15 &gt; <a href="http://www.bing.com。" target="_blank" rel="noopener">www.bing.com。</a></li><li>ping 包从 enp0s3 发送出去，到达 <a href="http://www.bing.com。" target="_blank" rel="noopener">www.bing.com。</a></li></ol></blockquote><blockquote><p>参考 <a href="http://www.cnblogs.com/CloudMan6/p/7107407.html" target="_blank" rel="noopener">http://www.cnblogs.com/CloudMan6/p/7107407.html</a></p></blockquote><h3 id="二、外部世界如何访问容器。"><a href="#二、外部世界如何访问容器。" class="headerlink" title="二、外部世界如何访问容器。"></a>二、外部世界如何访问容器。</h3><p>答案是：端口映射。</p><blockquote><p>docker 可将容器对外提供服务的端口映射到 host 的某个端口，外网通过该端口访问容器。容器启动时通过-p参数映射端口<br><img src="http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20170704-1499178217227020407.jpg" alt=""><br>容器启动后，可通过 docker ps 或者 docker port 查看到 host 映射的端口。在上面的例子中，httpd 容器的 80 端口被映射到 host 32773 上，这样就可以通过 <host ip="">:<32773> 访问容器的 web 服务了。</32773></host></p></blockquote><p>除了映射动态端口，也可在 -p 中指定映射到 host 某个特定端口，例如可将 80 端口映射到 host 的 8080 端口：<br><img src="http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20170704-1499178217544056517.jpg" alt=""><br>每一个映射的端口，host 都会启动一个 docker-proxy 进程来处理访问容器的流量：<br><img src="http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20170704-1499178217655045961.jpg" alt=""></p><h3 id="以-0-0-0-0-32773-gt-80-tcp-为例分析整个过程："><a href="#以-0-0-0-0-32773-gt-80-tcp-为例分析整个过程：" class="headerlink" title="以 0.0.0.0:32773-&gt;80/tcp 为例分析整个过程："></a>以 0.0.0.0:32773-&gt;80/tcp 为例分析整个过程：</h3><p><img src="http://7xo6kd.com1.z0.glb.clouddn.com/upload-ueditor-image-20170704-1499178217815071023.jpg" alt=""></p><blockquote><ol><li>docker-proxy 监听 host 的 32773 端口。</li><li>当 curl 访问 10.0.2.15:32773 时，docker-proxy 转发给容器 172.17.0.2:80。</li><li>httpd 容器响应请求并返回结果。</li></ol></blockquote>]]></content>
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker Image</title>
      <link href="/2018/05/28/docker-storage/"/>
      <url>/2018/05/28/docker-storage/</url>
      <content type="html"><![CDATA[<h2 id="1-what"><a href="#1-what" class="headerlink" title="1.what"></a>1.what</h2><p>docker 是用go写的，将进程进行封装，<br>Docker本身是容器管理技术，不是虚拟化技术。<br>类似技术：VM</p><h2 id="2-why"><a href="#2-why" class="headerlink" title="2.why"></a>2.why</h2><ul><li>快速创建环境（开发，测试，生产）</li><li>整体交付（运行环境+代码）</li><li>环境一致性保证，从开发，测试以及到生产环境</li><li>更好的完成devops</li></ul><h2 id="3-how"><a href="#3-how" class="headerlink" title="3.how"></a>3.how</h2><p>见下</p><h2 id="4-install"><a href="#4-install" class="headerlink" title="4.install"></a>4.install</h2><p>略</p><h2 id="5-基本概念"><a href="#5-基本概念" class="headerlink" title="5.基本概念"></a>5.基本概念</h2><ul><li>image<ol><li>一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</li><li>分层存储</li></ol></li><li>container：<ol><li>容器与镜像的关系<br> 容器就是镜像的实例，一个镜像可以创建无数个实例。</li></ol><ul><li>区别：<ol><li>镜像only读取 不能写入，但是可以在当前image上叠加，形成新的image</li><li>容器支持读写    </li></ol></li></ul></li><li>registry：<br>  镜像中央存储仓库<br>  其中Docker hub是docker官方提供的中央存储仓库</li></ul><h2 id="6-image详解"><a href="#6-image详解" class="headerlink" title="6.image详解"></a>6.image详解</h2><blockquote><p>Docker镜像管理</p><ol><li>镜像分层技术<br>|-aufs</li><li>创建镜像<br> |-DockerFile(recommend)<br> |-docker commit</li><li>下载镜像到主机<br> |-docker pull</li><li>删除镜像<br> |-docker rmi<br>4.1 两种情况不能删除images<ol><li>该进行有创建容器存在</li><li>该image是其他image的父image</li></ol></li><li>上传镜像到registry<br> |-docker push</li><li>Docker数据管理<br>如果我们删除了容器，但是数据不会被删除。<br>特性：<br> 1.保留容器数据<br> 2.容器volume最佳使用方法<br> 3.容器和volume的关系<br> 4.容器volume如何管理</li></ol></blockquote><h2 id="7-tag"><a href="#7-tag" class="headerlink" title="7. tag"></a>7. tag</h2><p>下面通过例子为大家介绍 Docker 社区普遍使用的 tag 方案。</p><blockquote><p>docker tag myimage-v2.0.0 myimage:2<br> docker tag myimage-v2.0.0 myimage:2.0<br> docker tag myimage-v2.0.0 myimage:2.0.0<br> docker tag myimage-v2.0.0 myimage:latest</p></blockquote><blockquote><p>参考：<a href="http://www.cnblogs.com/CloudMan6/p/6885700.html" target="_blank" rel="noopener">http://www.cnblogs.com/CloudMan6/p/6885700.html</a></p></blockquote><h2 id="8-Docker-Hub"><a href="#8-Docker-Hub" class="headerlink" title="8. Docker Hub"></a>8. Docker Hub</h2><ol><li><p>登陆Docker Hub</p><ul><li>docker login -u xxxx</li></ul></li><li><p>修改镜像的 repository 使之与 Docker Hub 账号匹配。</p><ul><li>docker tag username/app:version</li></ul></li><li><p>上传</p><ul><li>docker push username/app:version</li></ul></li><li><p>下载</p><ul><li>docker pull username/app:version</li></ul></li></ol><h2 id="9-搭建本地-Registry"><a href="#9-搭建本地-Registry" class="headerlink" title="9. 搭建本地 Registry"></a>9. 搭建本地 Registry</h2><p>略</p><h2 id="10-小结"><a href="#10-小结" class="headerlink" title="10. 小结"></a>10. 小结</h2><p>下面是镜像的常用操作子命令：</p><ul><li><p>images    显示镜像列表</p></li><li><p>history   显示镜像构建历史</p></li><li><p>commit    从容器创建新镜像</p></li><li><p>build     从 Dockerfile 构建镜像</p></li><li><p>tag       给镜像打 tag</p></li><li><p>pull      从 registry 下载镜像</p></li><li><p>push      将 镜像 上传到 registry</p></li><li><p>rmi       删除 Docker host 中的镜像</p></li><li><p>search    搜索 Docker Hub 中的镜像</p></li></ul>]]></content>
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
