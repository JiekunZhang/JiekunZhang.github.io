<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Docker Image</title>
      <link href="/2018/05/28/docker-Image/"/>
      <url>/2018/05/28/docker-Image/</url>
      <content type="html"><![CDATA[<h2 id="1-what"><a href="#1-what" class="headerlink" title="1.what"></a>1.what</h2><p>docker 是用go写的，将进程进行封装，<br>Docker本身是容器管理技术，不是虚拟化技术。<br>类似技术：VM</p><h2 id="2-why"><a href="#2-why" class="headerlink" title="2.why"></a>2.why</h2><ul><li>快速创建环境（开发，测试，生产）</li><li>整体交付（运行环境+代码）</li><li>环境一致性保证，从开发，测试以及到生产环境</li><li>更好的完成devops</li></ul><h2 id="3-how"><a href="#3-how" class="headerlink" title="3.how"></a>3.how</h2><p>见下</p><h2 id="4-install"><a href="#4-install" class="headerlink" title="4.install"></a>4.install</h2><p>略</p><h2 id="5-基本概念"><a href="#5-基本概念" class="headerlink" title="5.基本概念"></a>5.基本概念</h2><ul><li>image<ol><li>一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</li><li>分层存储</li></ol></li><li>container：<ol><li>容器与镜像的关系<br> 容器就是镜像的实例，一个镜像可以创建无数个实例。</li></ol><ul><li>区别：<ol><li>镜像only读取 不能写入，但是可以在当前image上叠加，形成新的image</li><li>容器支持读写    </li></ol></li></ul></li><li>registry：<br>  镜像中央存储仓库<br>  其中Docker hub是docker官方提供的中央存储仓库</li></ul><h2 id="6-image详解"><a href="#6-image详解" class="headerlink" title="6.image详解"></a>6.image详解</h2><blockquote><p>Docker镜像管理</p><ol><li>镜像分层技术<br>|-aufs<ol start="2"><li>创建镜像<br>|-DockerFile(recommend)<br>|-docker commit</li><li>下载镜像到主机<br>|-docker pull</li><li>删除镜像<br>|-docker rmi<br>4.1 两种情况不能删除images<ol><li>该进行有创建容器存在</li><li>该image是其他image的父image</li></ol></li><li>上传镜像到registry<br>|-docker push</li><li>Docker数据管理<br>如果我们删除了容器，但是数据不会被删除。<br>特性：<br>1.保留容器数据<br>2.容器volume最佳使用方法<br>3.容器和volume的关系<br>4.容器volume如何管理</li></ol></li></ol></blockquote><h2 id="7-tag"><a href="#7-tag" class="headerlink" title="7. tag"></a>7. tag</h2><p>下面通过例子为大家介绍 Docker 社区普遍使用的 tag 方案。</p><blockquote><p>docker tag myimage-v2.0.0 myimage:2<br> docker tag myimage-v2.0.0 myimage:2.0<br> docker tag myimage-v2.0.0 myimage:2.0.0<br> docker tag myimage-v2.0.0 myimage:latest</p></blockquote><blockquote><p>参考：<a href="http://www.cnblogs.com/CloudMan6/p/6885700.html" target="_blank" rel="noopener">http://www.cnblogs.com/CloudMan6/p/6885700.html</a></p></blockquote><h2 id="8-Docker-Hub"><a href="#8-Docker-Hub" class="headerlink" title="8. Docker Hub"></a>8. Docker Hub</h2><ol><li><p>登陆Docker Hub</p><ul><li>docker login -u xxxx</li></ul></li><li><p>修改镜像的 repository 使之与 Docker Hub 账号匹配。</p><ul><li>docker tag username/app:version</li></ul></li><li><p>上传</p><ul><li>docker push username/app:version</li></ul></li><li><p>下载</p><ul><li>docker pull username/app:version</li></ul></li></ol><h2 id="9-搭建本地-Registry"><a href="#9-搭建本地-Registry" class="headerlink" title="9. 搭建本地 Registry"></a>9. 搭建本地 Registry</h2><p>略</p><h2 id="10-小结"><a href="#10-小结" class="headerlink" title="10. 小结"></a>10. 小结</h2><p>下面是镜像的常用操作子命令：</p><ul><li><p>images    显示镜像列表</p></li><li><p>history   显示镜像构建历史</p></li><li><p>commit    从容器创建新镜像</p></li><li><p>build     从 Dockerfile 构建镜像</p></li><li><p>tag       给镜像打 tag</p></li><li><p>pull      从 registry 下载镜像</p></li><li><p>push      将 镜像 上传到 registry</p></li><li><p>rmi       删除 Docker host 中的镜像</p></li><li><p>search    搜索 Docker Hub 中的镜像</p></li></ul>]]></content>
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
